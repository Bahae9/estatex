CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fullName VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(10),
    roles VARCHAR(5) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE agents (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fullName VARCHAR(50) NOT NULL,
    phoneNumber VARCHAR(10) NOT NULL UNIQUE,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE feedbacks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    rate INT NOT NULL,
    feedback TEXT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE realEstates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId INT NOT NULL,
    type VARCHAR(255) NOT NULL,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    price INT NOT NULL,
    transactionType ENUM('SALE', 'RENT') NOT NULL,
    title VARCHAR(255) NOT NULL,
    description LONGTEXT NOT NULL,
    size INT NOT NULL,
    location VARCHAR(255) NOT NULL,
    imageUrls LONGTEXT NOT NULL,
    FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE contracts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL
);

CREATE TABLE transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    realEstateId INT NOT NULL,
    agentId INT NOT NULL,
    buyerId INT NOT NULL,
    contractId INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (realEstateId) REFERENCES realEstates(id) ON DELETE CASCADE,
    FOREIGN KEY (agentId) REFERENCES agents(id),
    FOREIGN KEY (buyerId) REFERENCES users(id),
    FOREIGN KEY (contractId) REFERENCES contracts(id) ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER before_transaction_delete
BEFORE DELETE ON transactions
FOR EACH ROW
BEGIN
    DELETE FROM contracts WHERE id = OLD.contractId;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_realEstate_delete
BEFORE DELETE ON realEstates
FOR EACH ROW
BEGIN
    DELETE FROM transactions WHERE realEstateId = OLD.id;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_user_delete
BEFORE DELETE ON users
FOR EACH ROW
BEGIN
    DELETE FROM realEstates WHERE userId = OLD.id;
END;
//
DELIMITER ;